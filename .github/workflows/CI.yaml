name: CI

on: [push, pull_request]

jobs:
  checks:
    name: Run checks
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - '5432:5432'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: DeLaGuardo/setup-clojure@2.0
        with:
          tools-deps: '1.10.1.469'
      - name: 'API: Run tests'
        run: 'clojure -A:test'
        env:
          TIMBRE_LEVEL: ':warn'
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Install dependencies
        run: npm ci --prefer-offline
      - name: Unit Tests
        run: npm t
      - name: Typecheck
        run: npm run typecheck
      - name: E2E Tests
        env:
          PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          PUSHER_APP_KEY: ${{ secrets.PUSHER_APP_KEY }}
          PUSHER_SECRET: ${{ secrets.PUSHER_SECRET }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          SPOTIFY_REFRESH_TOKEN_A: ${{ secrets.SPOTIFY_REFRESH_TOKEN_A }}
          GCLOUD_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIALS}}
        run: cp .env.test .env.build && npm run migrate up && npm run e2e:ci

  # Deploy job only runs on master after checks are successful
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: checks
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Install dependencies
        run: npm ci --prefer-offline
      - name: Migrate database
        run: npm run migrate up
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      - name: Deploy to Vercel
        uses: amondnet/now-deployment@v2
        with:
          zeit-token: ${{ secrets.ZEIT_TOKEN }}
          now-args: '--prod'
          now-org-id: ${{ secrets.ORG_ID}}
          now-project-id: ${{ secrets.PROJECT_ID}}
